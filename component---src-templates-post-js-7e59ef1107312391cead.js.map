{"version":3,"sources":["webpack:///./src/templates/post.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./src/utils/siteConfig.js","webpack:///./.cache/public-page-renderer.js","webpack:///./src/components/common/Layout.js","webpack:///./src/components/common/PostCard.js","webpack:///./src/components/common/Pagination.js","webpack:///./src/components/common/Navigation.js","webpack:///./src/components/common/index.js","webpack:///./src/components/common/meta/getAuthorProperties.js","webpack:///./src/components/common/meta/ImageMeta.js","webpack:///./src/components/common/meta/ArticleMeta.js","webpack:///./src/components/common/meta/WebsiteMeta.js","webpack:///./src/components/common/meta/AuthorMeta.js","webpack:///./src/components/common/meta/MetaData.js","webpack:///./src/components/common/meta/index.js","webpack:///./.cache/public-page-renderer-prod.js"],"names":["Post","props","state","commentsEnabled","showComments","bind","this","setState","_","render","data","location","post","markdownRemark","disqusShortname","config","disqusConfig","identifier","frontmatter","id","title","type","className","dateTime","published_at","tags","map","key","name","to","slug","feature_image","childImageSharp","fluid","dangerouslySetInnerHTML","__html","html","comment","onClick","shortname","React","Component","propTypes","PropTypes","shape","excerpt","string","isRequired","object","StaticQueryContext","createContext","StaticQuery","Consumer","staticQueryData","query","children","func","module","exports","siteUrl","postsPerPage","siteTitleMeta","siteDescriptionMeta","siteTwitterHandle","siteFacebookHandle","language","shareImageWidth","shareImageHeight","shortTitle","siteIcon","backgroundColor","themeColor","cover_image","logo","navigation","label","url","googleAnalyticsId","m","require","default","DefaultLayout","bodyClass","ButtonContainer","isHome","replace","styled","div","Button","button","HeaderTitle","h1","lang","e","preventDefault","window","href","icon","faHome","node","bool","DefaultLayoutSettingsQuery","PostCard","readingTime","readingTimeHelper","alt","featured","author","src","profile_image","Pagination","pageContext","previousPagePath","nextPagePath","humanPageNumber","numberOfPages","role","rel","Navigation","navClass","navItem","i","match","target","defaultProps","arrayOf","getAuthorProperties","primaryAuthor","authorProfiles","push","website","twitter","facebook","compact","sameAsArray","length","join","image","facebookUrl","fetchAuthorData","ImageMeta","content","property","ArticleMetaGhost","settings","canonical","ghostPost","publicTags","tagsHelper","visibility","fn","tag","primaryTag","shareImage","get","publisherLogo","resolve","articleId","meta_title","meta_description","og_title","og_description","updated_at","keyword","twitter_title","twitter_description","allGhostSettings","WebsiteMeta","description","bio","oneOf","AuthorMeta","MetaData","pathname","ghostPage","ArticleMeta","allMarkdownRemark","ghostTag","ghostAuthor","ProdPageRenderer","pageResources","loader","getResourcesForPathnameSync","createElement","InternalPageRenderer","json"],"mappings":"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","file":"component---src-templates-post-js-7e59ef1107312391cead.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport { graphql } from 'gatsby'\nimport Img from 'gatsby-image'\nimport { Link } from 'gatsby'\nimport { Layout } from '../components/common'\nimport { MetaData } from '../components/common/meta'\nimport { DiscussionEmbed } from \"disqus-react\"\nimport config from \"../utils/siteConfig\"\n/**\n* Single post view (/:slug)\n*\n* This file renders a single post and loads all the content.\n*\n*/\nclass Post extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = { commentsEnabled: false }\n        this.showComments = this.showComments.bind(this)\n    }\n\n    showComments() {\n        this.setState(_ => {\n            return {\n                commentsEnabled: true,\n            }\n        })\n    }\n    render(){\n        const { data, location } = this.props\n        const post = data.markdownRemark\n        const disqusShortname = config.disqusShortname\n        const disqusConfig = {\n            identifier: post.frontmatter.id,\n            title: post.frontmatter.title,\n        }\n\n        return (\n            <>\n                <MetaData data={data} location={location} id={post.frontmatter.id} type=\"article\" />\n                <Layout>\n                    <div className=\"container\">\n                        <article className=\"content\">\n                            <header className=\"post-full-header\">\n                                <div className=\"post-full-meta\">\n                                    <time\n                                        className=\"post-full-meta-date\"\n                                        dateTime=\"{post.frontmatter.published_at}\"\n                                    >\n                                        {post.frontmatter.published_at}\n                                    </time>\n\n                                    {post.frontmatter.tags.map(({ frontmatter }) => (\n                                        <span key={frontmatter.name}>\n                                            <span className=\"date-divider\">/</span>\n                                            <Link to={`tag/${frontmatter.slug}`}>{frontmatter.name}</Link>\n                                        </span>\n                                    ))}\n                                </div>\n                                <h1 className=\"post-full-title\">\n                                    {post.frontmatter.title}\n                                </h1>\n                            </header>\n                            {post.frontmatter.feature_image ? (\n                                <figure className=\"post-feature-image\">\n                                    {post.frontmatter.feature_image && post.frontmatter.feature_image.childImageSharp &&\n                                    <Img fluid={post.frontmatter.feature_image.childImageSharp.fluid}/>\n                                    }\n                                    {/* <img\n                                    src={post.frontmatter.feature_image}\n                                    alt={post.frontmatter.title}\n                                /> */}\n                                </figure>\n                            ) : null}\n                            <section className=\"post-full-content\">\n                                {/* <h1 className=\"content-title\">\n                                {post.frontmatter.title}\n                            </h1> */}\n\n                                {/* The main post content */}\n                                <section\n                                    className=\"content-body load-external-scripts\"\n                                    dangerouslySetInnerHTML={{\n                                        __html: post.html,\n                                    }}\n                                />\n                            </section>\n                        </article>\n                        {post.frontmatter.comment && !this.state.commentsEnabled && disqusShortname && <div className=\"show-comment-button\" onClick={this.showComments}>Show Comments</div> }\n                        {post.frontmatter.comment && this.state.commentsEnabled && disqusShortname && <DiscussionEmbed shortname={disqusShortname} config={disqusConfig} />}\n                    </div>\n                </Layout>\n            </>\n        )\n    }\n}\n// const Post = ({ data, location, pageContext }) => {\n//     // console.log(`POST -> `, data, pageContext)\n//\n//\n// };\n\nPost.propTypes = {\n    data: PropTypes.shape({\n        markdownRemark: PropTypes.shape({\n            excerpt: PropTypes.string.isRequired,\n        }).isRequired,\n    }).isRequired,\n    location: PropTypes.object.isRequired,\n}\n\nexport default Post\n\nexport const postQuery = graphql`\n  query($slug: String!) {\n    markdownRemark(frontmatter: { slug: { eq: $slug } }) {\n      html\n      frontmatter {\n        date(formatString: \"MMMM DD, YYYY\")\n        slug\n        title\n        feature_image {\n            childImageSharp {\n              fluid(maxWidth: 1000, maxHeight: 500) {\n                ...GatsbyImageSharpFluid\n              }\n            }\n          }\n        author {\n            frontmatter {\n                name\n                profile_image\n                twitter\n                facebook\n                website\n            }\n        }\n        tags {\n            frontmatter {\n                name\n                slug\n            }\n        }\n        meta_description\n        published_at(formatString: \"MMMM DD, YYYY\")\n        comment,\n        id\n      }\n      excerpt\n    }\n  }\n`\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\n\nconst StaticQueryContext = React.createContext({})\n\nconst StaticQuery = props => (\n  <StaticQueryContext.Consumer>\n    {staticQueryData => {\n      if (\n        props.data ||\n        (staticQueryData[props.query] && staticQueryData[props.query].data)\n      ) {\n        return (props.render || props.children)(\n          props.data ? props.data.data : staticQueryData[props.query].data\n        )\n      } else {\n        return <div>Loading (StaticQuery)</div>\n      }\n    }}\n  </StaticQueryContext.Consumer>\n)\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n}\n","module.exports = {\n    siteUrl: `https://rushabh31.github.io/blogsite`, // Site domain. Do not include a trailing slash!\n\n    postsPerPage: 12, // Number of posts shown on paginated pages (changes this requires sometimes to delete the cache)\n\n    siteTitleMeta: `Gatsby Theme Ghost`, // This allows an alternative site title for meta data for pages.\n    siteDescriptionMeta: `Minimalistic Gatsby theme for blog`, // This allows an alternative site description for meta data for pages.\n    siteTwitterHandle: `@rushabh31`,\n    siteFacebookHandle: `rushabhpatel`,\n    language: `en`,\n\n    shareImageWidth: 1000, // Change to the width of your default share image\n    shareImageHeight: 523, // Change to the height of your default share image\n\n    shortTitle: `Personal Blog`, // Used for App manifest e.g. Mobile Home Screen\n    siteIcon: `favicon.png`, // Logo in /static dir used for SEO, RSS, and App manifest\n    backgroundColor: `#e9e9e9`, // Used for Offline Manifest\n    themeColor: `#15171A`, // Used for Offline Manifest\n    cover_image: ``,\n\n    logo: `/images/logo.png`,\n\n    navigation: [\n        {\n            label: `Home`,\n            url: `/`,\n        },\n        {\n            label: `About me`,\n            url: `/about`,\n        },\n    ],\n\n    googleAnalyticsId: \"\", // ADD_COMPLETE_TRACKING_ID => UA-151385213-1\n\n    disqusShortname: \"\" // ADD_SHORT_NAME => https://help.disqus.com/en/articles/1717111-what-s-a-shortname\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Helmet from 'react-helmet'\nimport { Link, StaticQuery, graphql } from 'gatsby'\nimport Img from 'gatsby-image'\nimport styled from 'styled-components';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faHome } from '@fortawesome/free-solid-svg-icons'\nimport { Navigation } from '.'\nimport config from '../../utils/siteConfig'\n// import Particles from './particles';\n\n// Styles\nimport '../../styles/app.css'\n\n/**\n* Main layout component\n*\n* The Layout component wraps around each page and template.\n* It also provides the header, footer as well as the main\n* styles, and meta data for each page.\n*\n*/\nconst DefaultLayout = ({ data, children, bodyClass, isHome }) => {\n    const site = config\n    const twitterUrl = config.siteTwitterHandle ? `https://twitter.com/${config.siteTwitterHandle.replace(/^@/, ``)}` : null\n    const facebookUrl = config.siteFacebookHandle ? `https://www.facebook.com/${config.siteFacebookHandle.replace(/^\\//, ``)}` : null\n    const ButtonContainer = styled.div`\n                display: 'block';\n                position: 'absolute';\n                top: 10px;\n                align-content: 'center';\n                right: 10px;`\n    const Button = styled.button`\n    -webkit-appearance: none;\n    background: #e4405f;\n    color: #FFF;\n    border: none;\n    padding: 8px 16px;\n    font-size: 16px;\n    border-radius: 5px;\n    cursor: pointer;\n    transition: 0.2s;\n    outline: 0;\n    :hover {\n        box-shadow: 0px 0px 10px 1px rgba(0,0,0,0.10);\n    }`\n\n    const HeaderTitle = styled.h1`\n    font-weight: 500;\n    font-family: \"cassette\";\n    line-height: 1.15;\n    margin: 1.25rem 0;\n    font-size: 4.5em;\n    text-align: center;\n    color: #a7c56b;\n    @media only screen and (max-width: 768px) {\n        font-size: 3em;\n    }\n    `\n    return (\n    <>\n        <Helmet>\n            <html lang={config.language} />\n            <body className={bodyClass} />\n        </Helmet>\n\n        <div className=\"viewport\">\n\n            <div className=\"viewport-top\">\n                {/* The main header section on top of the screen */}\n\n                <header className=\"site-head\">\n                    <div className=\"container\">\n                    <center><ButtonContainer>\n                        <Button onClick={(e) => {\n                            e.preventDefault();\n                            window.location.href='http://rushabh.info';\n                            }} >\n                        <FontAwesomeIcon icon={faHome} /> Home\n                        </Button>\n                    </ButtonContainer></center>\n\n                    <HeaderTitle> Welcome to my Blogsite</HeaderTitle>\n\n                        {/* <div className=\"site-mast\">\n                            <div className={isHome ? `site-mast-left` : `site-mast-left-flex`}>\n                                <Link to=\"/\">\n                                    {config.logo ?\n                                        <img className=\"site-logo\" src={config.logo} alt={config.siteTitleMeta} />\n                                        : <Img fixed={data.file.childImageSharp.fixed} alt={site.title} />\n                                    }\n                                </Link>\n                                {isHome ? null :\n                                    <nav className=\"site-nav\">\n                                        <div className=\"site-nav-left\">\n                                            <Navigation data={config.navigation} navClass=\"site-nav-item\" />\n                                        </div>\n                                    </nav>}\n                            </div>\n                            <div className=\"site-mast-right\">\n                                { config.siteTwitterHandle && <a href={ twitterUrl } className=\"site-nav-item\" target=\"_blank\" rel=\"noopener noreferrer\"><img className=\"site-nav-icon\" src=\"/images/icons/twitter.svg\" alt=\"Twitter\" /></a>}\n                                { config.siteFacebookHandle && <a href={ facebookUrl } className=\"site-nav-item\" target=\"_blank\" rel=\"noopener noreferrer\"><img className=\"site-nav-icon\" src=\"/images/icons/facebook.svg\" alt=\"Facebook\" /></a>}\n                                <a className=\"site-nav-item\" href={ `https://feedly.com/i/subscription/feed/${config.siteUrl}/rss/` } target=\"_blank\" rel=\"noopener noreferrer\"><img className=\"site-nav-icon\" src=\"/images/icons/rss.svg\" alt=\"RSS Feed\" /></a>\n                            </div>\n                        </div>\n                        { isHome ?\n                            <div className=\"site-banner\">\n                                <h1 className=\"site-banner-title\">{config.siteTitleMeta}</h1>\n                                <p className=\"site-banner-desc\">{config.siteDescriptionMeta}</p>\n                            </div> :\n                            null}\n                        {isHome ?\n                            <nav className=\"site-nav\">\n                                <div className=\"site-nav-left\">\n                                    <Navigation data={config.navigation} navClass=\"site-nav-item\" />\n                                </div>\n                                <div className=\"site-nav-right\">\n                                </div>\n                            </nav> : null} */}\n                    </div>\n                </header>\n                \n                \n                <main className=\"site-main\" id=\"particles-js\">\n                \n                    {/* All the main content gets inserted here, index.js, post.js */}\n                    {children}\n                </main>\n\n            </div>\n\n            <div className=\"viewport-bottom\">\n                {/* The footer at the very bottom of the screen */}\n                <footer className=\"site-foot\">\n                    <div className=\"site-foot-nav container\">\n                        {/* <div className=\"site-foot-nav-left\">\n                            <Link to=\"/\">{config.siteTitleMeta}</Link>\n                        </div>\n                        <div className=\"site-foot-nav-right\">\n                            <Navigation data={config.navigation} navClass=\"site-foot-nav-item\" />\n                        </div> */}\n                    </div>\n                </footer>\n\n            </div>\n            \n        </div>\n\n    </>\n    \n    )\n}\n\nDefaultLayout.propTypes = {\n    children: PropTypes.node.isRequired,\n    bodyClass: PropTypes.string,\n    isHome: PropTypes.bool\n}\n\nconst DefaultLayoutSettingsQuery = props => (\n    <StaticQuery\n        query={graphql`\n            query GhostSettings {\n                file(relativePath: {eq: \"ghost-icon.png\"}) {\n                    childImageSharp {\n                        fixed(width: 30, height: 30) {\n                            ...GatsbyImageSharpFixed\n                        }\n                    }\n                }\n            }\n        `}\n        render={data => <DefaultLayout data={data} {...props} />}\n    />\n)\n\nexport default DefaultLayoutSettingsQuery\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Link } from 'gatsby'\nimport Img from 'gatsby-image'\nimport { readingTime as readingTimeHelper } from '@tryghost/helpers'\n\nconst PostCard = ({ post }) => {\n    // console.log(\"Postcard\", post)\n    const url = `/${post.frontmatter.slug}/`\n    const readingTime = readingTimeHelper(post)\n    \n    return (\n        <Link to={url} className=\"post-card\">\n            <header className=\"post-card-header\">\n                {post.frontmatter.feature_image &&\n                    post.frontmatter.feature_image.childImageSharp && (\n                    <Img\n                        fluid={\n                            post.frontmatter.feature_image\n                                .childImageSharp.fluid\n                        }\n                        alt={post.frontmatter.title}\n                    />\n                )}\n                {/* {post.frontmatter.feature_image &&\n                    <div className=\"post-card-image\" style={{\n                        backgroundImage: `url(${post.frontmatter.feature_image})` ,\n                    }}></div>} */}\n            </header>\n            <div className=\"post-card-content\">\n                {post.frontmatter.tags && (\n                    <span className=\"post-card-tags\">\n                        {post.frontmatter.tags[0].frontmatter.name}\n                    </span>\n                )}\n                {post.frontmatter.featured && <span>Featured</span>}\n                <h2 className=\"post-card-title\">\n                    {post.frontmatter.title}\n                </h2>\n                <section className=\"post-card-excerpt\">\n                    {post.excerpt}\n                </section>\n                <footer className=\"post-card-footer\">\n                    <div className=\"post-card-footer-left\">\n                        <div className=\"post-card-avatar\">\n                            {post.frontmatter.author ? (\n                                <img\n                                    className=\"author-profile-image\"\n                                    src={\n                                        post.frontmatter.author.frontmatter\n                                            .profile_image\n                                    }\n                                    alt={\n                                        post.frontmatter.author.frontmatter\n                                            .name\n                                    }\n                                />\n                            ) : (\n                                <img\n                                    className=\"default-avatar\"\n                                    src=\"/images/icons/avatar.svg\"\n                                    alt={\n                                        post.frontmatter.author.frontmatter\n                                            .name\n                                    }\n                                />\n                            )}\n                        </div>\n                        <span className=\"post-card-author-name\">\n                            {post.frontmatter.author.frontmatter.name}\n                        </span>\n                    </div>\n                    <div className=\"post-card-footer-right\">\n                        <div className=\"post-reading-time\">\n                            {readingTime}\n                        </div>\n                    </div>\n                </footer>\n            </div>\n        </Link>\n    )\n}\n\nPostCard.propTypes = {\n    post: PropTypes.shape({\n        frontmatter: PropTypes.object.isRequired,\n    }).isRequired,\n}\n\nexport default PostCard","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Link } from 'gatsby'\n\nconst Pagination = ({ pageContext }) => {\n    const { previousPagePath, nextPagePath, humanPageNumber, numberOfPages } = pageContext\n\n    return (\n        <nav className=\"pagination\" role=\"navigation\">\n            <div>\n                {previousPagePath && (\n\n                    <Link to={previousPagePath} rel=\"prev\">\n                            Previous\n                    </Link>\n\n                )}\n            </div>\n            {numberOfPages > 1 && <div className=\"pagination-location\">Page {humanPageNumber} of {numberOfPages}</div>}\n            <div>\n                {nextPagePath && (\n\n                    <Link to={nextPagePath} rel=\"next\">\n                            Next\n                    </Link>\n                )}\n            </div>\n        </nav>\n    )\n}\n\nPagination.propTypes = {\n    pageContext: PropTypes.object.isRequired,\n}\n\nexport default Pagination\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Link } from 'gatsby'\n\n/**\n* Navigation component\n*\n* The Navigation component takes an array of your Ghost\n* navigation property that is fetched from the settings.\n* It differentiates between absolute (external) and relative link (internal).\n* You can pass it a custom class for your own styles, but it will always fallback\n* to a `site-nav-item` class.\n*\n*/\nconst Navigation = ({ data, navClass }) => (\n    <>\n        {data.map((navItem, i) => {\n            if (navItem.url.match(/^\\s?http(s?)/gi)) {\n                return <a className={navClass} href={navItem.url} key={i} target=\"_blank\" rel=\"noopener noreferrer\">{navItem.label}</a>\n            } else {\n                return <Link className={navClass} to={navItem.url} key={i}>{navItem.label}</Link>\n            }\n        })}\n    </>\n)\n\nNavigation.defaultProps = {\n    navClass: `site-nav-item`,\n}\n\nNavigation.propTypes = {\n    data: PropTypes.arrayOf(\n        PropTypes.shape({\n            label: PropTypes.string.isRequired,\n            url: PropTypes.string.isRequired,\n        }).isRequired,\n    ).isRequired,\n    navClass: PropTypes.string,\n}\n\nexport default Navigation\n","export { default as Layout } from './Layout'\nexport { default as PostCard } from './PostCard'\nexport { default as Pagination } from './Pagination'\nexport { default as Navigation } from './Navigation'\n","import _ from 'lodash'\nimport PropTypes from 'prop-types'\n\nexport const getAuthorProperties = (primaryAuthor) => {\n    let authorProfiles = []\n\n    authorProfiles.push(\n        primaryAuthor.website ? primaryAuthor.website : null,\n        primaryAuthor.twitter ? `https://twitter.com/${primaryAuthor.twitter.replace(/^@/, ``)}/` : null,\n        primaryAuthor.facebook ? `https://www.facebook.com/${primaryAuthor.facebook.replace(/^\\//, ``)}/` : null\n    )\n\n    authorProfiles = _.compact(authorProfiles)\n\n    return {\n        name: primaryAuthor.name || null,\n        sameAsArray: authorProfiles.length ? `[\"${_.join(authorProfiles, `\", \"`)}\"]` : null,\n        image: primaryAuthor.profile_image || null,\n        facebookUrl: primaryAuthor.facebook ? `https://www.facebook.com/${primaryAuthor.facebook.replace(/^\\//, ``)}/` : null,\n    }\n}\n\ngetAuthorProperties.defaultProps = {\n    fetchAuthorData: false,\n}\n\ngetAuthorProperties.PropTypes = {\n    primaryAuthor: PropTypes.shape({\n        name: PropTypes.string.isRequired,\n        profile_image: PropTypes.string,\n        website: PropTypes.string,\n        twitter: PropTypes.string,\n        facebook: PropTypes.string,\n    }).isRequired,\n}\n\nexport default getAuthorProperties\n","import React from 'react'\nimport Helmet from 'react-helmet'\nimport PropTypes from 'prop-types'\nimport config from '../../../utils/siteConfig'\n\nconst ImageMeta = ({ image }) => {\n    if (!image) {\n        return null\n    }\n\n    return (\n        <Helmet>\n            <meta name=\"twitter:card\" content=\"summary_large_image\" />\n            <meta name=\"twitter:image\" content={image} />\n            <meta property=\"og:image\" content={image} />\n            <meta property=\"og:image:width\" content={config.shareImageWidth} />\n            <meta property=\"og:image:height\" content={config.shareImageHeight} />\n        </Helmet >\n    )\n}\n\nImageMeta.propTypes = {\n    image: PropTypes.string,\n}\n\nexport default ImageMeta\n","import React from 'react'\nimport Helmet from \"react-helmet\"\nimport { StaticQuery, graphql } from 'gatsby'\nimport PropTypes from 'prop-types'\nimport _ from 'lodash'\nimport url from 'url'\n\nimport getAuthorProperties from './getAuthorProperties'\nimport ImageMeta from './ImageMeta'\nimport config from '../../../utils/siteConfig'\n\nimport { tags as tagsHelper } from '@tryghost/helpers'\n\nconst ArticleMetaGhost = ({ data, settings, canonical, id }) => {\n    const ghostPost = data\n    settings = config\n\n    const author = getAuthorProperties(ghostPost.frontmatter.author.frontmatter)\n    const publicTags = _.map(tagsHelper(ghostPost, { visibility: `public`, fn: tag => tag }), `name`)\n    const primaryTag = publicTags[0] || ``\n    const shareImage = ghostPost.frontmatter.feature_image\n        ? ghostPost.frontmatter.feature_image.childImageSharp.fluid.src\n        : _.get(config, `cover_image`, null);\n    const publisherLogo = config.siteIcon ? url.resolve(config.siteUrl, config.siteIcon) : null\n    const articleId = id;\n\n    return (\n        <>\n            <Helmet>\n                <title>{ghostPost.frontmatter.meta_title || ghostPost.frontmatter.title}</title>\n                <meta name=\"description\" content={ghostPost.frontmatter.meta_description || ghostPost.excerpt} />\n                <link rel=\"canonical\" href={canonical} />\n\n                <meta property=\"og:site_name\" content={config.title} />\n                <meta property=\"og:type\" content=\"article\" />\n                <meta property=\"og:title\"\n                    content={\n                        ghostPost.frontmatter.og_title ||\n                        ghostPost.frontmatter.meta_title ||\n                        ghostPost.frontmatter.title\n                    }\n                />\n                <meta property=\"og:description\"\n                    content={\n                        ghostPost.frontmatter.og_description ||\n                        ghostPost.frontmatter.meta_description ||\n                        ghostPost.frontmatter.excerpt\n                    }\n                />\n                <meta property=\"og:url\" content={canonical} />\n                <meta property=\"article:published_time\" content={ghostPost.frontmatter.published_at} />\n                <meta property=\"article:modified_time\" content={ghostPost.frontmatter.updated_at} />\n                {publicTags.map((keyword, i) => (<meta property=\"article:tag\" content={keyword} key={i} />))}\n                {author.facebookUrl && <meta property=\"article:author\" content={author.facebookUrl} />}\n\n                <meta name=\"twitter:title\"\n                    content={\n                        ghostPost.twitter_title ||\n                        ghostPost.meta_title ||\n                        ghostPost.title\n                    }\n                />\n                <meta name=\"twitter:description\"\n                    content={\n                        ghostPost.twitter_description ||\n                        ghostPost.excerpt ||\n                        ghostPost.meta_description\n                    }\n                />\n                <meta name=\"twitter:url\" content={canonical} />\n                <meta name=\"twitter:label1\" content=\"Written by\" />\n                <meta name=\"twitter:data1\" content={author.name} />\n                {primaryTag && <meta name=\"twitter:label2\" content=\"Filed under\" />}\n                {primaryTag && <meta name=\"twitter:data2\" content={primaryTag} />}\n\n                {settings.twitter && <meta name=\"twitter:site\" content={`https://twitter.com/${settings.twitter.replace(/^@/, ``)}/`} />}\n                {settings.twitter && <meta name=\"twitter:creator\" content={settings.twitter} />}\n                <script type=\"application/ld+json\">{`\n                    {\n                        \"@context\": \"https://schema.org/\",\n                        \"@type\": \"Article\",\n                        \"author\": {\n                            \"@type\": \"Person\",\n                            \"name\": \"${author.name}\",\n                            ${author.image ? author.sameAsArray ? `\"image\": \"${author.image}\",` : `\"image\": \"${author.image}\"` : ``}\n                            ${author.sameAsArray ? `\"sameAs\": ${author.sameAsArray}` : ``}\n                        },\n                        ${publicTags.length ? `\"keywords\": \"${_.join(publicTags, `, `)}\",` : ``}\n                        \"headline\": \"${ghostPost.frontmatter.meta_title || ghostPost.frontmatter.title}\",\n                        \"url\": \"${canonical}\",\n                        \"datePublished\": \"${ghostPost.frontmatter.published_at}\",\n                        \"dateModified\": \"${ghostPost.frontmatter.updated_at}\",\n                        ${shareImage ? `\"image\": {\n                                \"@type\": \"ImageObject\",\n                                \"url\": \"${shareImage}\",\n                                \"width\": \"${config.shareImageWidth}\",\n                                \"height\": \"${config.shareImageHeight}\"\n                            },` : ``}\n                        \"publisher\": {\n                            \"@type\": \"Organization\",\n                            \"name\": \"${settings.title}\",\n                            \"logo\": {\n                                \"@type\": \"ImageObject\",\n                                \"url\": \"${publisherLogo}\",\n                                \"width\": 60,\n                                \"height\": 60\n                            }\n                        },\n                        \"description\": \"${ghostPost.frontmatter.meta_description || ghostPost.frontmatter.excerpt}\",\n                        \"mainEntityOfPage\": {\n                            \"@type\": \"WebPage\",\n                            \"@id\": \"${config.siteUrl}\"\n                        }\n                    }\n                `}</script>\n                <script type=\"application/javascript\">\n                    {`console.log(\"Called\"); window.pageId=\"${articleId}\"`}\n                </script>\n            </Helmet>\n            <ImageMeta image={shareImage} />\n        </>\n    )\n}\n\nArticleMetaGhost.propTypes = {\n    data: PropTypes.shape({\n        html: PropTypes.string.isRequired,\n        frontmatter: PropTypes.object.isRequired,\n        excerpt: PropTypes.string.isRequired,\n    }).isRequired,\n    settings: PropTypes.shape({\n        allGhostSettings: PropTypes.object.isRequired,\n    }).isRequired,\n    canonical: PropTypes.string.isRequired,\n}\n\n// const ArticleMetaQuery = props => (\n//     <StaticQuery\n//         query={graphql`\n//             query {\n//                 allGhostSettings {\n//                     edges {\n//                         node {\n//                             ...GhostSettingsFields\n//                         }\n//                     }\n//                 }\n//             }\n//         `}\n//         render={data => <ArticleMetaGhost settings={data} {...props} />}\n//     />\n// )\n\nexport default ArticleMetaGhost\n","import React from 'react'\nimport Helmet from \"react-helmet\"\nimport PropTypes from 'prop-types'\nimport _ from 'lodash'\nimport { StaticQuery, graphql } from 'gatsby'\nimport url from 'url'\n\nimport ImageMeta from './ImageMeta'\nimport config from '../../../utils/siteConfig'\n\nconst WebsiteMeta = ({ data, canonical, name, description, image, type }) => {\n    // (`WebsiteMeta ->`, data, name, description, image)\n\n    const publisherLogo = url.resolve(config.siteUrl, config.siteIcon)\n    let shareImage = image || _.get(config, `cover_image`, null)\n\n    shareImage = shareImage ? url.resolve(config.siteUrl, shareImage) : null\n\n    description = description || data.meta_description || data.description || config.siteDescriptionMeta || config.siteDescriptionMeta\n    const title = `${name} - ${config.siteTitleMeta}`\n\n    return (\n        <>\n            <Helmet>\n                <title>{title}</title>\n                <meta name=\"description\" content={description} />\n                <link rel=\"canonical\" href={canonical} />\n                <meta\n                    property=\"og:site_name\"\n                    content={config.siteTitleMeta}\n                />\n                <meta property=\"og:type\" content=\"website\" />\n                <meta property=\"og:title\" content={title} />\n                <meta property=\"og:description\" content={description} />\n                <meta property=\"og:url\" content={canonical} />\n                <meta name=\"twitter:title\" content={title} />\n                <meta name=\"twitter:description\" content={description} />\n                <meta name=\"twitter:url\" content={canonical} />\n\n                {config.siteTwitterHandle && (\n                    <meta\n                        name=\"twitter:site\"\n                        content={`https://twitter.com/${config.siteTwitterHandle.replace(\n                            /^@/,\n                            ``\n                        )}/`}\n                    />\n                )}\n                {config.siteTwitterHandle && (\n                    <meta\n                        name=\"twitter:creator\"\n                        content={config.siteTwitterHandle}\n                    />\n                )}\n                <script type=\"application/ld+json\">{`\n                    {\n                        \"@context\": \"https://schema.org/\",\n                        \"@type\": \"${type}\",\n                        \"url\": \"${canonical}\",\n                        ${\n                            shareImage\n                                ? `\"image\": {\n                                \"@type\": \"ImageObject\",\n                                \"url\": \"${shareImage}\",\n                                \"width\": \"${config.shareImageWidth}\",\n                                \"height\": \"${config.shareImageHeight}\"\n                            },`\n                                : ``\n                        }\n                        \"publisher\": {\n                            \"@type\": \"Organization\",\n                            \"name\": \"${config.siteTitleMeta}\",\n                            \"logo\": {\n                                \"@type\": \"ImageObject\",\n                                \"url\": \"${publisherLogo}\",\n                                \"width\": 60,\n                                \"height\": 60\n                            }\n                        },\n                        \"mainEntityOfPage\": {\n                            \"@type\": \"WebPage\",\n                            \"@id\": \"${config.siteUrl}\"\n                        },\n                        \"description\": \"${description}\"\n                    }\n                `}</script>\n                <script>\n                    {`\n                       if (window.netlifyIdentity) {\n                        window.netlifyIdentity.on(\"init\", user => {\n                          if (!user) {\n                            window.netlifyIdentity.on(\"login\", () => {\n                              document.location.href = \"/admin/\";\n                            });\n                          }\n                        });\n                      }\n                    \n                `}</script>\n            </Helmet>\n            <ImageMeta image={shareImage} />\n        </>\n    )\n}\n\nWebsiteMeta.propTypes = {\n    data: PropTypes.shape({\n        title: PropTypes.string,\n        feature_image: PropTypes.string,\n        description: PropTypes.string,\n        bio: PropTypes.string,\n        profile_image: PropTypes.string,\n    }).isRequired,\n    canonical: PropTypes.string.isRequired,\n    name: PropTypes.string,\n    description: PropTypes.string,\n    image: PropTypes.string,\n    type: PropTypes.oneOf([`website`, `tag`]).isRequired,\n}\n\n// const WebsiteMetaQuery = props => (\n//     <StaticQuery\n//         query={graphql`\n//             query GhostSettingsWebsiteMeta {\n//                 allGhostSettings {\n//                     edges {\n//                         node {\n//                             ...GhostSettingsFields\n//                         }\n//                     }\n//                 }\n//             }\n//         `}\n//         render={data => <WebsiteMeta settings={data} {...props} />}\n//     />\n// )\n\nexport default WebsiteMeta\n","import React from 'react'\nimport Helmet from 'react-helmet'\nimport PropTypes from 'prop-types'\nimport _ from 'lodash'\nimport { StaticQuery, graphql } from 'gatsby'\n\nimport ImageMeta from './ImageMeta'\nimport getAuthorProperties from './getAuthorProperties'\nimport config from '../../../utils/siteConfig'\n\nconst AuthorMeta = ({ data, settings, canonical }) => {\n    // console.log(`AuthorMeta->`, data)\n    // settings = settings.allGhostSettings.edges[0].node\n\n    const author = getAuthorProperties(data)\n    const shareImage = author.image || _.get(config, `cover_image`, null)\n    const title = `${data.name} - ${config.siteTitleMeta}`\n    const description = data.description || config.siteDescriptionMeta\n\n    return (\n        <>\n            <Helmet>\n                <title>{title}</title>\n                <meta name=\"description\" content={description} />\n                <link rel=\"canonical\" href={canonical} />\n                <meta property=\"og:site_name\" content={config.siteTitleMeta} />\n                <meta property=\"og:type\" content=\"profile\" />\n                <meta property=\"og:title\" content={title} />\n                <meta property=\"og:description\" content={description} />\n                <meta property=\"og:url\" content={canonical} />\n                <meta name=\"twitter:title\" content={title} />\n                <meta name=\"twitter:description\" content={description} />\n                <meta name=\"twitter:url\" content={canonical} />\n                {config.siteTwitterHandle && <meta name=\"twitter:site\" content={`https://twitter.com/${config.siteTwitterHandle.replace(/^@/, ``)}/`} />}\n                {config.siteTwitterHandle && <meta name=\"twitter:creator\" content={config.siteTwitterHandle} />}\n                <script type=\"application/ld+json\">{`\n                    {\n                        \"@context\": \"https://schema.org/\",\n                        \"@type\": \"Person\",\n                        \"name\": \"${data.name}\",\n                        ${author.sameAsArray ? `\"sameAs\": ${author.sameAsArray},` : ``}\n                        \"url\": \"${canonical}\",\n                        ${shareImage ? `\"image\": {\n                                \"@type\": \"ImageObject\",\n                                \"url\": \"${shareImage}\",\n                                \"width\": \"${config.shareImageWidth}\",\n                                \"height\": \"${config.shareImageHeight}\"\n                            },` : ``}\n                        \"mainEntityOfPage\": {\n                            \"@type\": \"WebPage\",\n                            \"@id\": \"${config.siteUrl}\"\n                        },\n                        \"description\": \"${description}\"\n                    }\n                `}</script>\n            </Helmet>\n            <ImageMeta image={shareImage} />\n        </>\n    )\n}\n\nAuthorMeta.propTypes = {\n    data: PropTypes.shape({\n        name: PropTypes.string,\n        bio: PropTypes.string,\n        profile_image: PropTypes.string,\n        website: PropTypes.string,\n        twitter: PropTypes.string,\n        facebook: PropTypes.string,\n    }).isRequired,\n    settings: PropTypes.shape({\n        allGhostSettings: PropTypes.object.isRequired,\n    }).isRequired,\n    canonical: PropTypes.string.isRequired,\n}\n\n// const AuthorMetaQuery = props => (\n//     <StaticQuery\n//         query={graphql`\n//             query GhostSettingsAuthorMeta {\n//                 allGhostSettings {\n//                     edges {\n//                         node {\n//                             ...GhostSettingsFields\n//                         }\n//                     }\n//                 }\n//             }\n//         `}\n//         render={data => <AuthorMeta settings={data} {...props} />}\n//     />\n// )\n\nexport default AuthorMeta\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { StaticQuery, graphql } from 'gatsby'\nimport url from 'url'\n\nimport config from '../../../utils/siteConfig'\nimport ArticleMeta from './ArticleMeta'\nimport WebsiteMeta from './WebsiteMeta'\nimport AuthorMeta from './AuthorMeta'\n\n/**\n* MetaData will generate all relevant meta data information incl.\n* JSON-LD (schema.org), Open Graph (Facebook) and Twitter properties.\n*\n*/\nconst MetaData = ({\n    data,\n    name,\n    description,\n    image,\n    location,\n    type,\n    id\n}) => {\n    // console.log(`metaData->`, data, type)\n    const canonical = url.resolve(config.siteUrl, location.pathname, `/`)\n    const { ghostPage } = data\n    // settings = settings.allGhostSettings.edges[0].node\n\n    if (type === `article`) {\n        return (\n            <ArticleMeta\n                data={data.markdownRemark}\n                canonical={canonical}\n                id={id}\n            />\n        )\n    } else if (type === `tag`) {\n        return (\n            <WebsiteMeta\n                data={data.allMarkdownRemark}\n                canonical={canonical}\n                name={name}\n                description={description}\n                image={image}\n                type=\"tag\"\n            />\n        )\n    } else if (type === `author`) {\n        return (\n            <AuthorMeta\n                data={data}\n                canonical={canonical}\n                description={description}\n                image={image}\n                type=\"author\"\n            />\n        )\n    } else if (type === `page`) {\n        return (\n            <WebsiteMeta\n                data={ghostPage}\n                canonical={canonical}\n                type=\"website\"\n            />\n        )\n    } else {\n        name = name || config.siteTitleMeta\n        description = description || config.siteDescriptionMeta\n        image = image || config.cover_image || null\n\n        image = image ? url.resolve(config.siteUrl, image) : null\n\n        return (\n            <WebsiteMeta\n                data={{}}\n                canonical={canonical}\n                name={name}\n                description={description}\n                image={image}\n                type=\"website\"\n            />\n        )\n    }\n}\n\nMetaData.defaultProps = {\n    data: {},\n}\n\nMetaData.propTypes = {\n    data: PropTypes.shape({\n        ghostPost: PropTypes.object,\n        ghostTag: PropTypes.object,\n        ghostAuthor: PropTypes.object,\n        ghostPage: PropTypes.object,\n    }).isRequired,\n    location: PropTypes.shape({\n        pathname: PropTypes.string.isRequired,\n    }).isRequired,\n    title: PropTypes.string,\n    description: PropTypes.string,\n    image: PropTypes.string,\n}\n\n// const MetaDataQuery = props => (\n//     <StaticQuery\n//         query={graphql`\n//             query GhostSettingsMetaData {\n//                 allGhostSettings {\n//                     edges {\n//                         node {\n//                             title\n//                             description\n//                         }\n//                     }\n//                 }\n//             }\n//         `}\n//         render={data => <MetaData settings={data} {...props} />}\n//     />\n// )\n\nexport default MetaData\n","export { default as MetaData } from './MetaData'\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\nimport loader from \"./loader\"\n\nconst ProdPageRenderer = ({ location }) => {\n  const pageResources = loader.getResourcesForPathnameSync(location.pathname)\n  if (!pageResources) {\n    return null\n  }\n\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n"],"sourceRoot":""}